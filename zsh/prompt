#!/usr/bin/env zsh
# vi: ft=zsh

# Source:
# - http://michaelheap.com/pimp-your-zsh/
# - pipes: https://github.com/specious/bender
# More prompt expansion info at http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html

# Look at:
# https://github.com/agkozak/polyglot
# https://github.com/agkozak/agkozak-zsh-prompt

# Fills the color array so that we can do the '%{fg[red]%}'
# Source: https://github.com/zsh-users/zsh/blob/master/Functions/Misc/colors
autoload -U colors && colors
spectrum # Load spectrum function to enable $FG[010] stuff

# Git Status from color:
# - Green is default/good-to-go/unknown
# - Blue is known behind, like unpushed changes or unpushed branches
# - Red is local changes
# - Magenta is "detached HEAD" state

# Different char for each version control
function prompt_char {
  local color_one="%{$fg[red]%}"
  local color_two="%{$fg[yellow]%}"
  local color_three="%{$fg[green]%}"
  if [[ $platform == 'windows' ]]; then
    local char=">"
  elif [[ "$platform" = 'wsl' ]]; then
    local char=">"
  else
    local char="❯"
  fi
  # git branch >/dev/null 2>/dev/null && echo '±' && return
  # hg root >/dev/null 2>/dev/null && echo '☿' && return
  # echo '$'
  echo "$color_one$char$color_two$char$color_three$char"
}

function git_branch {

  # Check if we're in a git repo
  local git_repo="$(git rev-parse --git-dir 2>/dev/null)"

  if [[ -z "$git_repo" ]]; then
    echo ""
    return -1
  fi

  # if [[ "$platform" = 'wsl' ]]; then
    local parens_color="%{$fg[white]%}"
  # else
  #   # This seems to work on everything but the WSL unbuntu :shrug:
    # local parens_color="$FG[000]" This doesn't work on 'ConEmu Zsh with connector'
  # fi
  local left_parens="$parens_color(%{$reset_color%}"
  local right_parens="$parens_color)%{$reset_color%}"

  # Default to everything is fine
  local prompt_color="%{$fg[green]%}"

  # If trimming is needed pipe to: tr -d '[[:space:]]'
  local branch="$(git symbolic-ref --quiet --short HEAD 2>/dev/null)"

  local trunk="$(git_trimmed_origin_head)"

  if [[ -n "$branch" ]]; then
    if [[ "$branch" == "$trunk" ]]; then
      # Our branch is trunk, set branch color this way
      if [[ -n $(git status --porcelain 2> /dev/null) ]]; then
        # We have uncommited changes
        prompt_color="%{$fg[red]%}"
      elif [[ -n $(git log origin/$branch.. 2> /dev/null) ]]; then
        # We have changes to push
        prompt_color="%{$fg[blue]%}"
      elif [[ -n $(git log $trunk..origin/$trunk 2> /dev/null) ]]; then
        # We haven't pushed our changes
        prompt_color="%{$fg[blue]%}"
      fi
    else
      # We have an actual branch
      if [[ -n $(git status --porcelain 2> /dev/null) ]]; then
        # We have uncommited changes
        prompt_color="%{$fg[red]%}"
      else
        if [[ -n $(git branch -r | grep "origin/$branch") ]]; then
          # We have pushed our branch, check if we've diverged from origin

          if [[ -n $(git log origin/$branch.. 2> /dev/null) ]]; then
            # We have changes to push
            prompt_color="%{$fg[blue]%}"
          fi
        else
          # New non-trunk branch that hasn't been pushed, always set to blue
          prompt_color="%{$fg[blue]%}"
        fi
      fi
    fi

    # TODO: Determine some way to show that we're rebasing
    echo "$left_parens$prompt_color${branch//[^a-zA-Z0-9_\/-]/*}%{$reset_color%}$right_parens"
  else
    # TODO: What happens when we're rebasing?
    # Get the git name for given revision, which defaults to tag
    local detached_head="$(git name-rev --name-only HEAD 2>/dev/null)"
    if [[ -n "$detached_head" ]]; then
      # Strip leading 'tags'
      detached_head="${detached_head#tags/}"

      # Detached HEAD state is magenta
      prompt_color="%{$fg[magenta]%}"

      # TODO: We're running into issues here where it somehow defaults to "undefined"

      echo "$left_parens$prompt_color${detached_head//[^a-zA-Z0-9_\/-]/*}%{$reset_color%}$right_parens"
    else
      # HEAD is not a symbolic ref, and we don't know how to describe/name it
      echo "$left_parens$prompt_color???%{$reset_color%}$right_parens"
    fi
  fi
}

function check_exit_code() {
  local last_exit_code=$1
  if [[ $last_exit_code -ne 0 ]]; then
    local dash="%{$fg[red]%}-%{$reset_color%}"
    local center="%{$fg_bold[red]%}$last_exit_code%{$reset_color%}"
    local exit_code_prompt="$dash$center$dash "

    echo "$exit_code_prompt"
  fi
}

function name() {
  # Only show name if it's different than my usual
  local name=""
  local local_name="$(whoami)"

  # Convert name to lowercase, so that TScheffert works too
  if [[ ! "${(L)local_name}" =~ "tscheffe|trent" ]]; then
    name="%n"
  fi

  echo "%{$fg[red]%}$name%{$reset_color%}"
}

function comp_name() {
  local color="%{$fg[green]%}"
  # %m is the TCs-MacBook-Pro-4 (which is my localhost name)
  local name="%m"
  echo "$color$name"
}

# Check if we're in a git repo, if we are then only show that; otherwise show the
# current working directory
function path() {
  local color="%{$fg[yellow]%}"

  # TODO: Only shell out for git rev-parse once, like here: https://github.com/git/git/blob/041fe8fc83770f95b09db4aa9d9b3783789eab08/contrib/completion/git-prompt.sh#L364
  #   But use a zsh array to capture results
  local git_repo="$(git rev-parse --show-toplevel 2> /dev/null)"

  if [[ -n "$git_repo" ]]; then
    # Expand variable with `:t` for behavior like `basename`. Run `man zshexpn` for more info
    local git_root="../${git_repo:t}"

    # Get the path of the sub dir, relative to the top level dir; then expand the parameter
    # to remove a trailing forward slash
    local sub_dir="${$(git rev-parse --show-prefix)%/}"

    if [[ -n "$sub_dir" ]]; then
      local dir="$git_root/$sub_dir"
    else
      local dir="$git_root"
    fi
  else
    # %~ is a prompt expansion sequence which expands to the current working
    # directory but replaces $HOME with a ~ if it exists in the path
    local dir="%~"
  fi

  local left_bracket="["
  local right_bracket="]"
  echo "$color$left_bracket$dir$right_bracket"
}

function reset_colors() {
  local reset="%{$reset_color%}"
  echo "$reset"
}

function line_number() {
  local color="%{$fg[magenta]%}"
  local ln="{ %! }"
  echo "$color$ln$(reset_colors)"
}

function k8s_context() {
  local current_dir="$PWD"

  if ! type kubectl >/dev/null 2>&1; then
    # if we don't have kubectl installed, don't show it
    echo ""
  elif ! kubectl config current-context >/dev/null 2>&1 ]; then
    # If we don't have kubectl configured, don't show it
    echo ""
  elif [[ "$current_dir" == *"k8s-yaml"* ]]; then
    # if we're in k8s-yaml, show it
    local color="%{$fg[blue]%}"
    local context="$(kubectl config current-context)"
    if [[ -n "$context" ]]; then
      echo "<$color$context$(reset_colors)>"
    else
      echo ""
    fi
  else
    echo ""
  fi
}

function first_line_pipe() {
  local pipe_color="%{$fg[blue]%}"

  # This looks wonky in Vim because I have double width for utf8 chars, but it
  # looks good in the actual prompt

  echo "${pipe_color}┌─────$(reset_colors)"
}

function second_line_pipe() {
  local pipe_color="%{$fg[blue]%}"

  # Again, looks wonky in vim but not in the actual prompt
  echo "${pipe_color}└──$(reset_colors)"
}

function precmd() {
  local exit_code=$?
  local new_line=$'\n'
  PROMPT="$(first_line_pipe) $(line_number) $(check_exit_code $exit_code)$(name)$(path)$(git_branch)$(k8s_context)${new_line}$(second_line_pipe)$(prompt_char)$(reset_colors) "
  # RPROMPT="$(git_branch)$(reset_colors)"
}
