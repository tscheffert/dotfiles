#!/usr/bin/env ruby
# vim: ft=ruby

require File.join(__dir__, '..', 'ruby', 'lib', 'images_helper')
# require 'tty-command'

module SortMoviesByPrefix

  include ImagesHelper::Constants

  MOVIE_MATCHER = %r{
      \A
      (?<prefix>[\w\-\_]+)?
      \..+
      \z
    }x

  def self.perform(args:)
    if args[0] == '--help'
      command_name = File.basename(__FILE__)
      puts <<~HELPDOC
        USAGE:
            #{command_name}
                Sort movies in current directory by their prefixes. Does not do any searching of subfolders. Ignores everything except movies in current working directory.
            #{command_name} --test
                Reports which movies will move but doesn't move them
            #{command_name} --debug
                Reports a lot more information while sorting movies by prefixes
            #{command_name} --help
                Prints this message
      HELPDOC
      exit 0
    end

    @test_run = args.include?('--test')
    @debug = args.include?('--debug')

    movies = ImagesHelper.all_movies_in(dir: Dir.pwd)

    if @debug
      puts "FOUND THESE MOVIES:"
      puts movies
    end

    movies.each do |movie|
      sort_movie(movie: movie)
    end
  end

  def self.sort_movie(movie:)
    basename_movie = File.basename(movie)

    movie_match = basename_movie.match(MOVIE_MATCHER)

    if movie_match.blank?
      puts "Blank matcher for movie '#{basename_movie}'"

      return
    end

    if movie_match[:prefix].blank?
      puts "Blank prefix match for movie '#{basename_movie}'"
      return
    end

    puts "Found prefix '#{movie_match[:prefix]}' for movie '#{basename_movie}'" if @debug

    # Case doesn't matter on Windows, Dir::exist? is case-insensitive
    if Dir.exist?(movie_match[:prefix])
      puts "Sorted destination directory '#{movie_match[:prefix]}' already exists" if @debug
    else
      puts "Creating new destination directory '#{movie_match[:prefix]}'" if @debug || @test_run
      FileUtils.mkdir(movie_match[:prefix]) if !@test_run
    end

    if movie.length + movie_match[:prefix].length > 255
      warn "Cannot sort '#{basename_movie}', sorted name is too long"
    else
      puts "Moving movie '#{basename_movie}' into '#{movie_match[:prefix]}'" if @debug || @test_run
      FileUtils.mv(movie, movie_match[:prefix]) if !@test_run
    end
  end
  private_class_method :sort_movie

end

SortMoviesByPrefix.perform(args: ARGV)
