# Info https://git-scm.com/docs/git-config#_variables

[user]
  name = Trent Scheffert
  email = trent.scheffert@gmail.com

[core]
  # TODO: Not cross platform!
  editor = vim
  encoding = utf-8
  autocrlf = false
  # TODO: Figure out how to get rid of ^M in the diffs
  # whitespace = trailing-space, space-before-tab, -cr-at-eol
  # Start less with '--no-init' which will stop it from clearing the screen and
  #   make the git commands work
  pager = less -X
  # Use "global" .gitignore and .gitattributes
  excludesFile = $HOME/.gitignore
  attributesFile = $HOME/.gitattributes
  # Activate filesystem cache, making Git faster, after a "warm-up", Windows only
  fscache = true

[alias]
  lg = log -20 --pretty=format:'%Cred%h%Creset - %s %Cgreen(%cr %an)%Creset%C(yellow)%d%Creset' --abbrev-commit --date=relative
  lgr = log --graph --decorate --pretty=oneline --abbrev-commit
  # TODO: Play with this too
  wdiff = diff --word-diff=color --unified=1
  # TODO: Play with this
  # From: https://about.gitlab.com/2016/12/08/git-tips-and-tricks/
  # mr = !sh -c 'git fetch $1 merge-requests/$2/head:mr-$1-$2 && git checkout mr-$1-$2' -
  # all = "!f() { for i in `ls`; do if [ -d $i/.git ]; then echo \"$i\n--------------------------\"; git -C $i $1; echo; fi; done; }; f" # perform an action on all git repositories in the current directory (for example git all pull)


[branch]
  autoSetupMerge = true
  autoSetupRebase = always

[color]
  # Sets the default for most color preferences to auto
  ui = auto
  interactive = auto

[diff]
  algorithm = histogram
  colorMoved = zebra # Make the code blocks which only moved in the file a different color than the standard red/green.
  # Try to align hunks with blank lines
  compactionHeuristic = true
  # Highlight whitespace errors
  wsErrorHighlight = all
  renameLimit = 3000

[fetch]
  # Delete stale branches after each fetch
  prune = true

[pull]
  # Rebase fetched branches when a 'git pull' is run instead of merge
  rebase = true

[push]
  # Current pushes to remote branch with the same name, regardless of if that
  #   branch exists. Simple double checks that the branch exists on remote first.
  default = current

[rebase]
  # Automatically create a temporary stash entry before the operation begins, and
  #   apply it after the operation ends.
  # NOTE: Does not apply to the rebase operation performed by `git pull` when `pull.rebase` is true
  autoStash = true

[status]
  showUntrackedFiles = all

[merge]
  # Show common ancestor when merging
  conflictstyle = diff3

[init]
  templatedir = ~/.git_template
  defaultBranch = master

[rerere]
  # Reuse recorded resolutions, meaning automatically reolve merge conflicts based on past resolutions
  enabled = 1
