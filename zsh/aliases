#!/usr/bin/env zsh
# vi: ft=zsh


# TODO: Searching Aliases and functions
# - 'alias' lists all defined aliases
# - http://superuser.com/questions/681575/any-way-to-get-list-of-functions-defined-in-zsh-like-alias-command-for-aliases
# Folder shortcuts
alias cd-d='cd ~/.dotfiles'
alias cd-dev='cd ~/dev'
alias tgem='cd ~/dev/trunkclub-gem'

# ls alias for color-mode
alias lh='ls -lhaG'

# Prompt me if deleting more than three files or doing it recursively
alias rm='rm -I'

# simple ip
# TODO: Right now this fails, saying "cut: bad delimiter"
# alias ip='ifconfig | grep "inet " | grep -v 127.0.0.1 | cut -d\ -f2'

# more details
# TODO: This works, but not sure what it means...
# alias ip1="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"

# external ip
# TODO: Fix this, getting external IP would be awesome. Right now it just hangs
# alias ip2="curl -s http://www.showmyip.com/simple/ | awk '{print $1}'"

# See hidden files with ls
alias ls="ls -a --color=always"

# Hidden files for the_silver_searcher
alias ag="ag --hidden"

function ag-history {
  ag --hidden "$@" ~/.zsh_history/
}

# grep with color
# for whatever reason this doesn't work with my grep on windows
#alias grep='grep --color=auto'
alias grep='grep -i'

# refresh shell
alias reload='exec zsh -l'
alias reloadcomp='rm ~/.zcompdump; compinit'

# Use a theme with tldr (for the npm installed tldr)
alias tldr='tldr --theme base16'

# -- Postgres Aliases --

alias pg-start='pg_ctl -l $PGDATA/server.log start'
alias pg-stop='pg_ctl stop -m fast'
alias pg-status='pg_ctl status'
alias pg-restart='pg_ctl reload'

# Run psql for my local instance
alias pg-local='psql postgres://trunkclub:trunkclub@192.168.23.2/postgres'

# -- Git Aliases --

# Standard!
alias g='git'

# status!
alias gs='git status --short'

alias ga='git add'

alias gb='git branch'

# Git branch all
alias gba='git branch -a'

# Git branch delete
alias gbd='git branch -d'

# Git branch delete remote
alias gbdr='git push origin --delete'

# Git branch move (renames the branch to the supplied reflog)
alias gbm='git branch -m'

# Git branch force delete
alias gbfd='git branch -D'

# Grant branch delete --merged
# TODO: This (or something else) should delete branches that were present on origin but have no been deleted
alias gbd-m='git_branch_delete_merged'

# List the recent git branches
alias gbr='git_branch_recent'

# Git add patched
alias gap='git add -p'

# Git add all
alias gaa='git add .'

# Git add all (and) commit
alias gaac='git add . && git commit'

# Git add all (and) commit (with) message
alias gaacm='git add . && git commit -m'

# Git add only updated files, no new files
alias gau='git add -u'

# Git add new, adds a blank file for untracked files, useful for things like git diff
alias gan='git add --intent-to-add'

# Git commit
alias gc='git commit'

# Git commit with message
alias gcm='git commit -m'

# --amend changes the latest commit, and --no-edit tells it we don't want to change the messge
alias gca='git commit --amend --no-edit'

# Git add all commit amend
alias gaaca='git add . && git commit --amend --no-edit'

# Git commit amend message
alias gcam='git commit --amend'

# Git commit ammend, with edit (the message)
alias gcae='git commit --amend'

# Git Cherry Picking
alias gcp='git cherry-pick'
alias gcpc='git cherry-pick --continue'
alias gcpa='git cherry-pick --abort'

alias gd='git diff --color-words'

# Git diff files
alias gdf='git diff --name-only'

alias gds='git diff --staged --color-words'

# Git diff (with) origin HEAD
alias gdom='git diff --color-words origin/$(git_trimmed_origin_head)..'

# Git diff _files_ against origin/HEAD
alias gdfom='git diff origin/$(git_trimmed_origin_head)..HEAD --name-only'

# Git diff commits
alias gdc='git_commitwise_diff'

alias gp='git pull'

# Git force push, --force-with-lease ensures that we have the latest info from origin before allowing the force
alias gfpu='git push --force-with-lease'

alias gpu='git push'

alias gpuod='git push origin --delete'

alias gco='git checkout'

# Transparently treat 'master' as origin/HEAD
alias gcom='git checkout $(git_trimmed_origin_head)'

# Git checkout all
alias gcoa='git checkout -- .'

# Follow it up with a hyphen delimited branch name like: 'gcob my-branch-name'
alias gcob='git checkout -b'

alias gcooh='git checkout $(git_trimmed_origin_head)'

alias gcoo='git checkout --ours'
alias gcot='git checkout --theirs'

# Pretty log the last 'n' (default 20) commits
alias glg='git_pretty_log'

# Pretty log but only show all commits on the branch
alias glgb='git_pretty_log_branch'

# Show the diffs for recent commits with git log
alias glp='git log -p'

# Git log files, shows all the files in each commit and how much they've changed
alias glf='git log --stat --oneline origin/$(git_trimmed_origin_head)..HEAD'

alias gr='git rebase'

# Continue, with no edits
alias grc='GIT_EDITOR=true git rebase --continue'

alias gra='git rebase --abort'

alias grsk='git rebase --skip'

alias grom='git rebase origin/$(git_trimmed_origin_head)'

alias grbf='git rebase "$(git_branched_from_sha)"'

alias griom='git rebase -i origin/$(git_trimmed_origin_head)'

alias gribf='git rebase -i "$(git_branched_from_sha)"'

# Git reset to head
alias grs='git reset HEAD'

# Undo the last commit(s)
alias grh1='git reset HEAD~1'
alias grh2='git reset HEAD~2'
alias grh3='git reset HEAD~3'

# Temporarily ignore changes but leave them in the filesystem
#   'git ignore add', follow up with a <file>
alias gi-a='git update-index --assume-unchanged'

# Stop ignoring a file
#   'git ignore remove'
alias gi-r='git update-index --no-assume-unchanged'

# List all ignored files
#   'git ignore list'
alias gi-l="git ls-files -v | grep '^[[:lower:]]' | cut -f2 -d' '"

# Git Branch Fix Upstream
alias gbfu='git branch --set-upstream-to=origin/$(git symbolic-ref --quiet --short HEAD 2>/dev/null)'

# Git Branch Previous
alias gbrp='git reflog | sed -n "s/.*checkout: moving from .* to \(.*\)/\1/p" | sed "2q;d"'

# Git show
alias gsh='git show'

# Git show files
alias gshf='git show --name-only'

# Stash all tracked, unstaged files
alias gst='git stash'

# Stash with a message, includes untracked and ignored files
alias gstsa='git stash push --include-untracked'

# Git stash push with patch
alias gstsap='git stash push --patch --include-untracked'

# List all stashed files
alias gstl='git stash list'

# Pop the last changes off the stash
alias gstp='git stash pop'

# Show a stashed item
#   '-p' makes it more like 'git show'
#   use with 'stash@{n}' to reference a particular stash item
alias gstsh='git stash show -p'

# TODO: add aliases for 'git stash show untracked', 'git stash show files', and 'git stash show untracked files'
# https://stackoverflow.com/questions/12681529/in-git-is-there-a-way-to-show-untracked-stashed-files-without-applying-the-stas


# Drop a stash item, latest by default and specify with 'stash@{n}'
alias gstd='git stash drop'

# Git Grep for a list of files that contain the string
alias ggno='git grep --name-only'

# Git grep for files that contain string and open them in vim
alias ggo='git_grep_open'

# "Git Pickaxe"
alias g-pa='git-pickaxe'

function git-pickaxe {
  # info: http://www.philandstuff.com/2014/02/09/git-pickaxe.html
  git log -p -S "$@" .
}

# Git rebase remove
function grr {
  if [[ -d ".git/rebase-apply" ]]; then
    rm -rf ".git/rebase-apply"
    echo "Removed .git/rebase-apply"
  else
    echo "No .git/rebase-apply found, not removing"
  fi
}


# -- Ruby Aliases --
# Run Rubocop gem
alias rbc='rubocop --config ~/.rubocop.yml --color'

# Run Rubocop gem and auto-correct detected violations when available
alias rbca='rubocop --config ~/.rubocop.yml --auto-correct --color'

# Run Rubocop with a local .rubocop_todo.yml set to inherit from home directory config
alias rtd='rubocop --config .rubocop_todo.yml'

# Run Rubocop with todo and auto-correct
alias rtda='rubocop --config .rubocop_todo.yml'

# Bundle exec
alias be='bundle exec'

# Bundle exec rake shortcut
alias ber='bundle exec rake'

# Bundle exec rspec
alias be-rspec='bundle exec rspec'

# Runs rubocop with all of the changed files
alias rbc-m="git_show_exclude_ruby_files | xargs rubocop"

# Runs rubocop with autocorrect, (-n1) once for each file,
#   and (-p) while asking permission.
alias rbca-m="git_show_exclude_ruby_files | xargs -n1 -p rubocop --auto-correct"

# Run migrations
alias db-migrate="bundle exec rake db:migrate && RACK_ENV=test bundle exec rake db:migrate"


# --- Chef Aliases
# Chef Exec
alias ce='chef exec'

# Chef Exec rake tasks
alias cer='chef exec rake'

# Run chef-repo specs in parallel
alias ce-spec='chef exec parallel_rspec cookbooks/*/spec/'

# Chef gem
alias cg='chef gem'

function knife-live {
  # local knife_command=$@

  local live_config=~/.chef/live/knife-dev.rb
  if [[ ! -f "$live_config" ]]; then
    echo 1>&2 "No knife config found at $live_config"
  fi

  knife $@ --config "$live_config"
}

function knife-sandbox {
  # local knife_command="$@"

  local sandbox_config=~/.chef/sandbox/knife-dev.rb
  if [[ ! -f "$sandbox_config" ]]; then
    echo 1>&2 "No knife config found at $sandbox_config"
  fi

  knife $@ --config "$sandbox_config"
}

# -- Kubernetes Aliases

alias k='kubectl' # Shorthand for 'kubectl'


# -- Other Aliases
alias ..='cd ..'         # Go up one directory
alias ...='cd ../..'     # Go up two directories
alias ....='cd ../../..' # Go up three directories
alias -- -='cd -'        # Go back

# Make directory and CD into it
function mcd() {
  local directory="${1:?Must pass a directory to mkdir & cd}"
  mkdir -p "$directory" && cd "$directory"
}

# Provide a config file to yamllint
alias yamllint='yamllint -c $HOME/.yamllint'

# Run the last command as sudo
alias ok='sudo $(fc -ln -1)'

# Open changed files in (m)vim
#   Redirecting to /dev/null prevents it from staying attached to the shell
alias mvim-gd='mvim -- $(git diff --name-only) > /dev/null'
alias vim-gd='vim $(git diff --name-only)'

# Identify image properties for gifs
alias igif='identify -format "%f[%s] canvas=%Wx%H size=%wx%h offset=%X%Y %D %Tcs\n"'

# find . -name '$1'
alias f='findn'

function ifindn() {
  local name="${1:?Must provide a name to find}"
  find . -type d -iname "*$name*"
}

# open-repo is a python script that opens a git repo in the browser on github
alias or='open-repo'

alias find-kitchen="find ./ -type d -name '.kitchen'"
alias find-and-remove-kitchen="find ./ -type d -name '.kitchen' | xargs rm -rv {}"

# Curl without progress reports and accepting an HTTP request type
# Usage:
#   csr GET "http://elasticsearch.echo.com"
alias csr='curl --silent --show-error --request'

# Open Bash man page in Less, searching for the builtin provided as an argument
function man-bash() { man bash | less -p "^       $1 "; }

# Pretty Print the path
function pretty_path() {
  if (($+PATH)); then
    echo "$#path element(s):"
    printf '%q\n' "$path[@]"
  else
    echo "PATH unset"
  fi
}

