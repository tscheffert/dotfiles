#!/usr/bin/env ruby
# vim: ft=ruby

require 'pathname'
require File.join(__dir__, '..', 'ruby', 'lib', 'images_helper')

module FlattenImageFolders

  include ImagesHelper::Constants

  MAX_HYDRATE_DEPTH = 3

  # Note: Currently this only moves folders that contain only images into the
  # ALREADY_FLAT_DIRS_DIR. It's doesn't do any further flattening though it could in
  # the future.

  # Notes:
  #   - It doesn't tolerate anything other than images and directories
  #   - It only hydrates to a depth of 3
  #   - It only flattens at a depth of 1
  def self.perform(args:)
    if args[0] == '--help'
      command_name = File.basename(__FILE__)
      puts <<~HELPDOC
        USAGE:
            #{command_name}
                Moves nested image folders into subdirectories of the root
            #{command_name} --test
                Reports which folders will move but doesn't move them
            #{command_name} --move-already-flat
                Moves folders that are already flat into #{ALREADY_FLAT_DIRS_DIR}
            #{command_name} --debug
                Prints more information, to help debugging
            #{command_name} --help
                Prints this message
      HELPDOC
      exit 0
    end

    test_run = args.include?('--test')

    move_already_flat = args.include?('--move-already-flat')

    @@debug = args.include?('--debug')

    dirs = ImagesHelper.all_dirs_in(dir: '.')

    hydrated_dirs = dirs.map do |dir|
      hydrate_dir(dir: dir, depth: 0)
    end

    sorted_dirs = sort_hydrated_dirs(dirs: hydrated_dirs)
    puts "Dirs that are empty: #{sorted_dirs[:without_both].length}"
    puts "Dirs that are already sorted: #{sorted_dirs[:already_sorted].length}"
    puts "Dirs with only images: #{sorted_dirs[:only_images].length}"
    puts "Dirs with only subdirs: #{sorted_dirs[:only_subdirs].length}"

    # Something is wrong if there are images _AND_ subdirs, we don't know what to do
    if sorted_dirs[:with_both].present?
      warn 'Found dirs with images and subdirs:'
      sorted_dirs[:with_both].each do |dir|
        warn '  ' + dir[:path]
      end
      warn 'Aborting!'
      exit 1
    end

    if move_already_flat
      if sorted_dirs[:only_images].present?
        FileUtils.mkdir_p(ALREADY_FLAT_DIRS_DIR) unless test_run
      end

      puts "Moving #{sorted_dirs[:only_images].length} dirs to #{ALREADY_FLAT_DIRS_DIR}:" if @@debug
      sorted_dirs[:only_images].each do |dir|
        puts "  Moving #{dir[:path]} to #{ALREADY_FLAT_DIRS_DIR}" if @@debug
        ImagesHelper.safe_rename(dir[:path], ALREADY_FLAT_DIRS_DIR) unless test_run
      end
    end

    sorted_only_subdirs = sorted_dirs[:only_subdirs].map do |dir|
      {
        path:    dir[:path],
        images:  dir[:images],
        subdirs: sort_hydrated_dirs(dirs: dir[:subdirs])
      }
    end

    root_dir = Dir.pwd

    sorted_only_subdirs.each do |sorted_subdir_dirs|
      sorted_subdir_dirs[:subdirs][:only_images].each do |nested_image_dir|
        # TODO Probably not the correct place to do this but it works

        subdir = File.basename(nested_image_dir[:path])
        if bad_subdir_name(name: subdir)
          dest_dir = Pathname.new(nested_image_dir[:path]).parent.to_s
          puts "Flattening dir with bad subdirectory name: '#{subdir}' to '#{dest_dir}'" if @@debug
          ImagesHelper.safe_rename(nested_image_dir[:images], dest_dir) unless test_run

          remaining_contents = Dir.glob('*', base: nested_image_dir[:path])

          if remaining_contents.length > 1
            # Don't delete if anything else is there
            warn "Something wonky in #{nested_image_dir[:path]}, more contents than expected: \n#{remaining_contents}"
          elsif remaining_contents.length == 1
            if remaining_contents.first == ('info.txt')
              info_file = File.join(nested_image_dir[:path], 'info.txt')
              puts "Moving file '#{info_file}' to '#{dest_dir}'" if @@debug
              ImagesHelper.safe_rename(info_file, dest_dir) unless test_run
              puts "Removing now empty badsubdir: '#{nested_image_dir[:path]}'" if @@debug
              ImagesHelper.safe_remove_dir(nested_image_dir[:path]) unless test_run
            else
              warn "Something wonky in #{nested_image_dir[:path]}, singular contents is not 'info.txt' as expected: \n#{remaining_contents}"
            end
          else
            puts "Removing now empty badsubdir: '#{nested_image_dir[:path]}'" if @@debug
            ImagesHelper.safe_remove_dir(nested_image_dir[:path]) unless test_run
          end

        else
          puts "Moving to root nested image only dir: #{nested_image_dir[:path]}" if @@debug
          ImagesHelper.safe_rename(nested_image_dir[:path], root_dir) unless test_run
        end

      end

      sorted_subdir_dirs[:subdirs][:without_both].each do |nested_empty_dir|
        puts "Removing nested empty dir: #{nested_empty_dir[:path]}" if @@debug
        ImagesHelper.safe_remove_dir(nested_empty_dir[:path]) unless test_run
      end
    end

    was_empty_dirs = sorted_dirs[:without_both].select { |dir| Dir.empty?(dir[:path]) }
    was_empty_dirs.each do |dir|
      puts "Was empty, removing: #{dir[:path]}" if @@debug
      ImagesHelper.safe_remove_dir(dir[:path]) unless test_run
    end

    now_empty_dirs = sorted_only_subdirs.select { |dir| Dir.empty?(dir[:path]) }
    now_empty_dirs.each do |dir|
      puts "Now empty, removing: #{dir[:path]}" if @@debug
      ImagesHelper.safe_remove_dir(dir[:path]) unless test_run
    end
  end

  def self.sort_hydrated_dirs(dirs:)
    dirs_already_sorted, remaining = dirs.partition do |dir|

      sort = ImagesHelper.already_sorted_dir?(dir[:path])

      puts "Sorting dir: #{dir[:path]} was already sorted" if sort && @@debug

      sort
    end

    dirs_with_images_and_subdirs, remaining = remaining.partition do |dir|
      sort = dir[:images].present? && dir[:subdirs].present?

      puts "Sorting dir: #{dir[:path]} has images and subdirs" if sort && @@debug

      sort
    end

    dirs_without_images_or_subdirs, remaining = remaining.partition do |dir|
      sort = dir[:images].blank? && dir[:subdirs].blank?
    end

    dirs_with_images, remaining = remaining.partition do |dir|
      sort = dir[:images].present?

      puts "Sorting dir: #{dir[:path]} has only images" if sort && @@debug

      sort
    end

    dirs_with_subdirs, remaining = remaining.partition do |dir|
      sort = dir[:subdirs].present?

      puts "Sorting dir: #{dir[:path]} has only subdirs" if sort && @@debug

      sort
    end

    if remaining.present?
      warn 'Something is wrong with the hydration pipeline, dirs remaining'
      remaining.each do |dir|
        warn '  ' + dir[:path]
      end
      warn 'Aborting!'
      exit 1
    end

    {
      with_both:      dirs_with_images_and_subdirs,
      without_both:   dirs_without_images_or_subdirs,
      already_sorted: dirs_already_sorted,
      only_images:    dirs_with_images,
      only_subdirs:   dirs_with_subdirs
    }
  end
  private_class_method :sort_hydrated_dirs

  def self.hydrate_dir(dir:, depth:)
    depth += 1
    dir_entries = Pathname.new(dir).glob('*').map(&:to_s)

    images = dir_entries.select do |f|
      File.file?(f) && IMAGE_EXTENSIONS.include?(File.extname(f))
    end

    subdirs = dir_entries.select do |d|
      File.directory?(d)
    end

    hydrated_subdirs =
      if depth > MAX_HYDRATE_DEPTH
        subdirs # Too deep, paths only
      else
        subdirs.map do |subdir|
          hydrate_dir(dir: subdir, depth: depth)
        end
      end

    {
      path:    dir,
      images:  images,
      subdirs: hydrated_subdirs
    }
  end
  private_class_method :hydrate_dir

  def self.bad_subdir_name(name:)
    name.match?(/\A[a-z0-9]{3,10}_[a-z0-9]{10}\z/)
  end

end

FlattenImageFolders.perform(args: ARGV)
