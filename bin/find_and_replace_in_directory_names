#!/usr/bin/env ruby
# vim: ft=ruby

require 'fileutils'
require 'active_support'
require 'active_support/core_ext/object/blank'

require File.join(__dir__, '..', 'ruby', 'lib', 'file_helper')

module FindAndReplaceInDirectoryNames

  def self.perform(argv:)
    # Sync STDOUT so that everything appears in order
    STDOUT.sync = true

    find = argv[0]
    replace = argv[1]

    if find.blank?
      warn 'Must provide a string to find'
      warn 'USAGE: find_and_replace_in_directory_names <find> <replace>'
      exit 1
    end

    if replace.blank?
      warn 'Must provide a string to replace'
      warn 'USAGE: find_and_replace_in_directory_names <find> <replace>'
      exit 1
    end

    puts "Finding with: '#{find}' and replacing with: '#{replace}'"

    current_directory = File.absolute_path('.')

    puts "Matching entries in directory: #{current_directory}"

    # Dir.glob has interesting behavior with `[` characters where it behaves like a
    # regex, but we want literal match behavior. Just use Dir::entries and then filter
    to_rename = Dir.entries(current_directory, encoding: 'UTF-8')
      .select { |dir| Dir.exist?(dir) }
      .select { |dir| dir.include?(find) }

    if to_rename.blank?
      puts "No matching directories"
      exit 0
    end

    puts 'Renaming:'
    to_rename.each do |source|
      dest = source.sub(find, replace).strip

      puts "#{source} => #{dest}"
      FileHelper.safe_rename(source, dest)
    end
  end

end

FindAndReplaceInDirectoryNames.perform(argv: ARGV)
